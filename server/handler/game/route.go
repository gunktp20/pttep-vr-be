package game

import (
	"net/http"
	"pttep-vr-api/pkg/services/game"
	"pttep-vr-api/server/route"
)

func Route(service *game.Service) []*route.Route {
	handler := newHandler(service)
	path := "/game"
	pathDashboard := "/dashboard"

	routes := []*route.Route{
		{
			Name:        "Insert Game Transaction",
			Description: "Insert Game Transaction",
			Method:      http.MethodPost,
			Path:        path + "/transactions",
			Middleware:  nil,
			HandlerFunc: handler.CreatTransactionGame,
			Test:        false,
		},
		{
			Name:        "Get Setting Game List",
			Description: "Get Setting Game List",
			Method:      http.MethodGet,
			Path:        path + "/list",
			Middleware:  nil,
			HandlerFunc: handler.GetSettingGame,
			Test:        false,
		},
		{
			Name:        "Get Setting Game Id",
			Description: "Get Setting Game Id",
			Method:      http.MethodGet,
			Path:        path + "/list/:key",
			Middleware:  nil,
			HandlerFunc: handler.GetSettingGameId,
			Test:        false,
		},
		{
			Name:        "Update Setting Game",
			Description: "Update Setting Game",
			Method:      http.MethodPost,
			Path:        path + "/setting-game",
			Middleware:  nil,
			HandlerFunc: handler.SettingGame,
			Test:        false,
		},
		{
			Name:        "Dashboard",
			Description: "Dashboard",
			Method:      http.MethodPost,
			Path:        "/dashboard",
			Middleware:  nil,
			HandlerFunc: handler.Dashboard,
			Test:        false,
		},
		{
			Name:        "Insert Game Transaction Temp",
			Description: "Insert Game Transaction Temp",
			Method:      http.MethodPost,
			Path:        path + "/transactions-temp",
			Middleware:  nil,
			HandlerFunc: handler.CreatTransactionGameTemp,
			Test:        false,
		},
		{
			Name:        "Get Setting Game VR User",
			Description: "Get Setting Game User",
			Method:      http.MethodGet,
			Path:        path + "/user/:key",
			Middleware:  nil,
			HandlerFunc: handler.GetSettingGameUser,
			Test:        false,
		},
		{
			Name:        "Report Transaction Game User",
			Description: "Report Transaction Game User",
			Method:      http.MethodPost,
			Path:        path + "/report",
			Middleware:  nil,
			HandlerFunc: handler.GetSettingGame,
			Test:        false,
		},
		{
			Name:        "Dashboard Sum Time User",
			Description: "Dashboard Sum Time User",
			Method:      http.MethodPost,
			Path:        pathDashboard + "/time",
			Middleware:  nil,
			HandlerFunc: handler.DashboardSumTimeUser,
			Test:        false,
		},
		{
			Name:        "Dashboard Sum User",
			Description: "Dashboard Sum User",
			Method:      http.MethodPost,
			Path:        pathDashboard + "/user",
			Middleware:  nil,
			HandlerFunc: handler.DashboardSumUser,
			Test:        false,
		},
		{
			Name:        "Dashboard Avg Score",
			Description: "Dashboard Avg Score",
			Method:      http.MethodPost,
			Path:        pathDashboard + "/avg",
			Middleware:  nil,
			HandlerFunc: handler.DashboardAvgScore,
			Test:        false,
		},
		{
			Name:        "Dashboard Game Fail",
			Description: "Dashboard Game Fail",
			Method:      http.MethodPost,
			Path:        pathDashboard + "/game-fail",
			Middleware:  nil,
			HandlerFunc: handler.DashboardGameFail,
			Test:        false,
		},
		{
			Name:        "Dashboard Graph Game",
			Description: "Dashboard Graph Game",
			Method:      http.MethodPost,
			Path:        pathDashboard + "/graph",
			Middleware:  nil,
			HandlerFunc: handler.DashboardGraph,
			Test:        false,
		},
		{
			Name:        "Dashboard Pass Rate",
			Description: "Dashboard Pass Rate",
			Method:      http.MethodPost,
			Path:        pathDashboard + "/pass-rate",
			Middleware:  nil,
			HandlerFunc: handler.DashboardPassRate,
			Test:        false,
		},
		{
			Name:        "Dashboard Most Question",
			Description: "Dashboard Most Question",
			Method:      http.MethodPost,
			Path:        pathDashboard + "/most-quest",
			Middleware:  nil,
			HandlerFunc: handler.DashboardMostQuestion,
			Test:        false,
		},
		{
			Name:        "Dashboard Top Question",
			Description: "Dashboard Top Question",
			Method:      http.MethodPost,
			Path:        pathDashboard + "/top-quest",
			Middleware:  nil,
			HandlerFunc: handler.DashboardTopQuestionsByTimeByDate,
			Test:        false,
		},
		{
			Name:        "Dashboard Top Score User",
			Description: "Dashboard Top Score User",
			Method:      http.MethodPost,
			Path:        pathDashboard + "/top-score",
			Middleware:  nil,
			HandlerFunc: handler.DashboardTopScoreUserByTimeByDate,
			Test:        false,
		},
		{
			Name:        "Dashboard Top Quest Play",
			Description: "Dashboard Top Quest Play",
			Method:      http.MethodPost,
			Path:        pathDashboard + "/top-quest-user",
			Middleware:  nil,
			HandlerFunc: handler.DashboardTopQuest,
			Test:        false,
		},
		{
			Name:        "Report Transaction Game",
			Description: "Report Transaction Game",
			Method:      http.MethodPost,
			Path:        "/report",
			Middleware:  nil,
			HandlerFunc: handler.ReportTransGame,
			Test:        false,
		},
		{
			Name:        "Export Transaction Game",
			Description: "Report Transaction Game",
			Method:      http.MethodPost,
			Path:        "/export",
			Middleware:  nil,
			HandlerFunc: handler.ExportTransGame,
			Test:        false,
		},
	}
	return routes
}
