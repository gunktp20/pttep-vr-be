// Code generated by MockGen. DO NOT EDIT.
// Source: pttep-vr-api/pkg/repository/pttep-vr-db (interfaces: Interface)

// Package pttep_vr_db is a generated GoMock package.
package pttep_vr_db

import (
	models "pttep-vr-api/pkg/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// DB mocks base method.
func (m *MockInterface) DB() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DB")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// DB indicates an expected call of DB.
func (mr *MockInterfaceMockRecorder) DB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DB", reflect.TypeOf((*MockInterface)(nil).DB))
}

// FindDashboardTransGmaeUser mocks base method.
func (m *MockInterface) FindDashboardTransGmaeUser() ([]models.GameTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDashboardTransGmaeUser")
	ret0, _ := ret[0].([]models.GameTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDashboardTransGmaeUser indicates an expected call of FindDashboardTransGmaeUser.
func (mr *MockInterfaceMockRecorder) FindDashboardTransGmaeUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDashboardTransGmaeUser", reflect.TypeOf((*MockInterface)(nil).FindDashboardTransGmaeUser))
}

// FindGameTransactions mocks base method.
func (m *MockInterface) FindGameTransactions(arg0 string, arg1 float64, arg2 bool, arg3, arg4, arg5, arg6, arg7, arg8 string, arg9, arg10 int) ([]models.GameTransactionResponse, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindGameTransactions", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
	ret0, _ := ret[0].([]models.GameTransactionResponse)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindGameTransactions indicates an expected call of FindGameTransactions.
func (mr *MockInterfaceMockRecorder) FindGameTransactions(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindGameTransactions", reflect.TypeOf((*MockInterface)(nil).FindGameTransactions), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
}

// FindOneUsers mocks base method.
func (m *MockInterface) FindOneUsers(arg0 uint) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneUsers", arg0)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneUsers indicates an expected call of FindOneUsers.
func (mr *MockInterfaceMockRecorder) FindOneUsers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneUsers", reflect.TypeOf((*MockInterface)(nil).FindOneUsers), arg0)
}

// FindOneUsersByEmail mocks base method.
func (m *MockInterface) FindOneUsersByEmail(arg0 models.User) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneUsersByEmail", arg0)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneUsersByEmail indicates an expected call of FindOneUsersByEmail.
func (mr *MockInterfaceMockRecorder) FindOneUsersByEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneUsersByEmail", reflect.TypeOf((*MockInterface)(nil).FindOneUsersByEmail), arg0)
}

// FindOneUsersTempByUsername mocks base method.
func (m *MockInterface) FindOneUsersTempByUsername(arg0 string) (models.UserTemp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneUsersTempByUsername", arg0)
	ret0, _ := ret[0].(models.UserTemp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneUsersTempByUsername indicates an expected call of FindOneUsersTempByUsername.
func (mr *MockInterfaceMockRecorder) FindOneUsersTempByUsername(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneUsersTempByUsername", reflect.TypeOf((*MockInterface)(nil).FindOneUsersTempByUsername), arg0)
}

// FindRportTransGmaeUser mocks base method.
func (m *MockInterface) FindRportTransGmaeUser() ([]models.GameTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRportTransGmaeUser")
	ret0, _ := ret[0].([]models.GameTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRportTransGmaeUser indicates an expected call of FindRportTransGmaeUser.
func (mr *MockInterfaceMockRecorder) FindRportTransGmaeUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRportTransGmaeUser", reflect.TypeOf((*MockInterface)(nil).FindRportTransGmaeUser))
}

// FindSettingGameById mocks base method.
func (m *MockInterface) FindSettingGameById(arg0 uint) ([]models.QuestionList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSettingGameById", arg0)
	ret0, _ := ret[0].([]models.QuestionList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSettingGameById indicates an expected call of FindSettingGameById.
func (mr *MockInterfaceMockRecorder) FindSettingGameById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSettingGameById", reflect.TypeOf((*MockInterface)(nil).FindSettingGameById), arg0)
}

// FindSettingGameList mocks base method.
func (m *MockInterface) FindSettingGameList() ([]models.SessionList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSettingGameList")
	ret0, _ := ret[0].([]models.SessionList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSettingGameList indicates an expected call of FindSettingGameList.
func (mr *MockInterfaceMockRecorder) FindSettingGameList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSettingGameList", reflect.TypeOf((*MockInterface)(nil).FindSettingGameList))
}

// FindSettingGameUser mocks base method.
func (m *MockInterface) FindSettingGameUser(arg0 string) ([]models.SessionWithDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSettingGameUser", arg0)
	ret0, _ := ret[0].([]models.SessionWithDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSettingGameUser indicates an expected call of FindSettingGameUser.
func (mr *MockInterfaceMockRecorder) FindSettingGameUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSettingGameUser", reflect.TypeOf((*MockInterface)(nil).FindSettingGameUser), arg0)
}

// FindUsers mocks base method.
func (m *MockInterface) FindUsers() ([]models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUsers")
	ret0, _ := ret[0].([]models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUsers indicates an expected call of FindUsers.
func (mr *MockInterfaceMockRecorder) FindUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUsers", reflect.TypeOf((*MockInterface)(nil).FindUsers))
}

// GetAvgOfMaxAverageScore mocks base method.
func (m *MockInterface) GetAvgOfMaxAverageScore(arg0, arg1 string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvgOfMaxAverageScore", arg0, arg1)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvgOfMaxAverageScore indicates an expected call of GetAvgOfMaxAverageScore.
func (mr *MockInterfaceMockRecorder) GetAvgOfMaxAverageScore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvgOfMaxAverageScore", reflect.TypeOf((*MockInterface)(nil).GetAvgOfMaxAverageScore), arg0, arg1)
}

// GetDistinctUsernameCountByDateRange mocks base method.
func (m *MockInterface) GetDistinctUsernameCountByDateRange(arg0, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDistinctUsernameCountByDateRange", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDistinctUsernameCountByDateRange indicates an expected call of GetDistinctUsernameCountByDateRange.
func (mr *MockInterfaceMockRecorder) GetDistinctUsernameCountByDateRange(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDistinctUsernameCountByDateRange", reflect.TypeOf((*MockInterface)(nil).GetDistinctUsernameCountByDateRange), arg0, arg1)
}

// GetGraphScoreSevenDay mocks base method.
func (m *MockInterface) GetGraphScoreSevenDay(arg0 string) ([]models.GraphTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGraphScoreSevenDay", arg0)
	ret0, _ := ret[0].([]models.GraphTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGraphScoreSevenDay indicates an expected call of GetGraphScoreSevenDay.
func (mr *MockInterfaceMockRecorder) GetGraphScoreSevenDay(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGraphScoreSevenDay", reflect.TypeOf((*MockInterface)(nil).GetGraphScoreSevenDay), arg0)
}

// GetMaxFalseIsPassByQuestion mocks base method.
func (m *MockInterface) GetMaxFalseIsPassByQuestion(arg0, arg1 string) ([]models.GameFailTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxFalseIsPassByQuestion", arg0, arg1)
	ret0, _ := ret[0].([]models.GameFailTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaxFalseIsPassByQuestion indicates an expected call of GetMaxFalseIsPassByQuestion.
func (mr *MockInterfaceMockRecorder) GetMaxFalseIsPassByQuestion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxFalseIsPassByQuestion", reflect.TypeOf((*MockInterface)(nil).GetMaxFalseIsPassByQuestion), arg0, arg1)
}

// GetMostQuestionByDate mocks base method.
func (m *MockInterface) GetMostQuestionByDate(arg0, arg1 string) ([]models.QuestionPlayCount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMostQuestionByDate", arg0, arg1)
	ret0, _ := ret[0].([]models.QuestionPlayCount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMostQuestionByDate indicates an expected call of GetMostQuestionByDate.
func (mr *MockInterfaceMockRecorder) GetMostQuestionByDate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMostQuestionByDate", reflect.TypeOf((*MockInterface)(nil).GetMostQuestionByDate), arg0, arg1)
}

// GetPassRateByDate mocks base method.
func (m *MockInterface) GetPassRateByDate(arg0, arg1 string) (models.DashboardPassRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPassRateByDate", arg0, arg1)
	ret0, _ := ret[0].(models.DashboardPassRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPassRateByDate indicates an expected call of GetPassRateByDate.
func (mr *MockInterfaceMockRecorder) GetPassRateByDate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPassRateByDate", reflect.TypeOf((*MockInterface)(nil).GetPassRateByDate), arg0, arg1)
}

// GetTopQuestionsByPlayCount mocks base method.
func (m *MockInterface) GetTopQuestionsByPlayCount(arg0, arg1 string) ([]models.QuestionPlayCount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopQuestionsByPlayCount", arg0, arg1)
	ret0, _ := ret[0].([]models.QuestionPlayCount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopQuestionsByPlayCount indicates an expected call of GetTopQuestionsByPlayCount.
func (mr *MockInterfaceMockRecorder) GetTopQuestionsByPlayCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopQuestionsByPlayCount", reflect.TypeOf((*MockInterface)(nil).GetTopQuestionsByPlayCount), arg0, arg1)
}

// GetTopQuestionsByTime mocks base method.
func (m *MockInterface) GetTopQuestionsByTime(arg0, arg1 string) ([]models.QuestionTimeStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopQuestionsByTime", arg0, arg1)
	ret0, _ := ret[0].([]models.QuestionTimeStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopQuestionsByTime indicates an expected call of GetTopQuestionsByTime.
func (mr *MockInterfaceMockRecorder) GetTopQuestionsByTime(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopQuestionsByTime", reflect.TypeOf((*MockInterface)(nil).GetTopQuestionsByTime), arg0, arg1)
}

// GetTotalScoreForUsersWithDateRange mocks base method.
func (m *MockInterface) GetTotalScoreForUsersWithDateRange(arg0, arg1 string) ([]models.UserTotalScore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalScoreForUsersWithDateRange", arg0, arg1)
	ret0, _ := ret[0].([]models.UserTotalScore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalScoreForUsersWithDateRange indicates an expected call of GetTotalScoreForUsersWithDateRange.
func (mr *MockInterfaceMockRecorder) GetTotalScoreForUsersWithDateRange(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalScoreForUsersWithDateRange", reflect.TypeOf((*MockInterface)(nil).GetTotalScoreForUsersWithDateRange), arg0, arg1)
}

// InsertOneGameTransaction mocks base method.
func (m *MockInterface) InsertOneGameTransaction(arg0 models.GameTransaction) (models.GameTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOneGameTransaction", arg0)
	ret0, _ := ret[0].(models.GameTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOneGameTransaction indicates an expected call of InsertOneGameTransaction.
func (mr *MockInterfaceMockRecorder) InsertOneGameTransaction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOneGameTransaction", reflect.TypeOf((*MockInterface)(nil).InsertOneGameTransaction), arg0)
}

// InsertOneGameTransactionTemp mocks base method.
func (m *MockInterface) InsertOneGameTransactionTemp(arg0 models.GameTransactionTemp) (models.GameTransactionTemp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOneGameTransactionTemp", arg0)
	ret0, _ := ret[0].(models.GameTransactionTemp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOneGameTransactionTemp indicates an expected call of InsertOneGameTransactionTemp.
func (mr *MockInterfaceMockRecorder) InsertOneGameTransactionTemp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOneGameTransactionTemp", reflect.TypeOf((*MockInterface)(nil).InsertOneGameTransactionTemp), arg0)
}

// InsertOneSettingGame mocks base method.
func (m *MockInterface) InsertOneSettingGame(arg0 models.Session) (models.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOneSettingGame", arg0)
	ret0, _ := ret[0].(models.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOneSettingGame indicates an expected call of InsertOneSettingGame.
func (mr *MockInterfaceMockRecorder) InsertOneSettingGame(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOneSettingGame", reflect.TypeOf((*MockInterface)(nil).InsertOneSettingGame), arg0)
}

// InsertOneSettingGameQuest mocks base method.
func (m *MockInterface) InsertOneSettingGameQuest(arg0 models.Question) (models.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOneSettingGameQuest", arg0)
	ret0, _ := ret[0].(models.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOneSettingGameQuest indicates an expected call of InsertOneSettingGameQuest.
func (mr *MockInterfaceMockRecorder) InsertOneSettingGameQuest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOneSettingGameQuest", reflect.TypeOf((*MockInterface)(nil).InsertOneSettingGameQuest), arg0)
}

// InsertOneUsers mocks base method.
func (m *MockInterface) InsertOneUsers(arg0 models.User) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOneUsers", arg0)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOneUsers indicates an expected call of InsertOneUsers.
func (mr *MockInterfaceMockRecorder) InsertOneUsers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOneUsers", reflect.TypeOf((*MockInterface)(nil).InsertOneUsers), arg0)
}

// InsertOneUsersTemp mocks base method.
func (m *MockInterface) InsertOneUsersTemp(arg0 models.UserTemp) (models.UserTemp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOneUsersTemp", arg0)
	ret0, _ := ret[0].(models.UserTemp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOneUsersTemp indicates an expected call of InsertOneUsersTemp.
func (mr *MockInterfaceMockRecorder) InsertOneUsersTemp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOneUsersTemp", reflect.TypeOf((*MockInterface)(nil).InsertOneUsersTemp), arg0)
}

// SumTimeTransGmaeUser mocks base method.
func (m *MockInterface) SumTimeTransGmaeUser(arg0, arg1 string) (models.DashboardTotal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SumTimeTransGmaeUser", arg0, arg1)
	ret0, _ := ret[0].(models.DashboardTotal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SumTimeTransGmaeUser indicates an expected call of SumTimeTransGmaeUser.
func (mr *MockInterfaceMockRecorder) SumTimeTransGmaeUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SumTimeTransGmaeUser", reflect.TypeOf((*MockInterface)(nil).SumTimeTransGmaeUser), arg0, arg1)
}

// UpdateOneUsers mocks base method.
func (m *MockInterface) UpdateOneUsers(arg0 models.User) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOneUsers", arg0)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOneUsers indicates an expected call of UpdateOneUsers.
func (mr *MockInterfaceMockRecorder) UpdateOneUsers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOneUsers", reflect.TypeOf((*MockInterface)(nil).UpdateOneUsers), arg0)
}

// UpdateSettingGameById mocks base method.
func (m *MockInterface) UpdateSettingGameById(arg0 models.Question) (models.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSettingGameById", arg0)
	ret0, _ := ret[0].(models.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSettingGameById indicates an expected call of UpdateSettingGameById.
func (mr *MockInterfaceMockRecorder) UpdateSettingGameById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSettingGameById", reflect.TypeOf((*MockInterface)(nil).UpdateSettingGameById), arg0)
}
